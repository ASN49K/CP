#include <fstream>
#include <algorithm>
#include <vector>
#include <cassert>
#include <cmath>
#include <stack>
#include <set>
#include <functional>
#include <bitset>
#include <map>
#include <unordered_map>
#include <queue>
#include <array>
#include <numeric>
using namespace std;
template<typename A, typename B> ostream& operator<<(ostream &os, const pair<A, B> &p) { return os << '(' << p.first << ", " << p.second << ')'; }
template<typename A> ostream& operator<<(ostream &os, vector<A>&a) { for(auto &c:a)os<<c<<' '; return os;}
template<typename A> istream& operator>>(istream  &os, vector<A>&a) { for(auto &c:a)os>>c; return os;}
template<typename A,size_t N> istream& operator>>(istream &os, array<A,N>&a) { for(auto &c:a)os>>c; return os;}
template<typename A,typename B> istream& operator>>(istream  &os, pair<A,B>&a) { os>>a.first>>a.second; return os;}
#define bug(a) cerr << "(" << #a << ": " << a << ")\n";
#define all(x) x.begin(),x.end()
#define pb push_back
#define lb lower_bound
#define ub upper_bound
#define PQ priority_queue
using pii= pair<int,int>;
using VI= vector<int>;
using v64= vector<int64_t>;
using i64= int64_t;
using i16= int16_t;
using u64= uint64_t;
using u32= uint32_t;
using i32= int32_t;
using u16= uint16_t;
const i32 inf=1e9;
const i64 INF=1e18;
const int mod=1e9+7;
const int sigma=26;
string yn(bool x){if(x)return "YES";return "NO";}


class DSU
{
    vector<int>t,sz;
    int root(int x)
    {
        if(t[x]!=x)
            t[x]=root(t[x]);
        return t[x];
    }
public:
    DSU(int n)
    {
        t.resize(n);
        sz.assign(n,1);
        iota(all(t),0);
    }
    void unite(int x,int y)
    {
        x=root(x);
        y=root(y);
        if(x==y)
            return;
        t[y]=x;
        sz[x]+=sz[y];
    }
    int size(int x)
    {
        return sz[root(x)];
    }
};
ifstream cin("mootube.in");
ofstream cout("mootube.out");
void solve()
{
    int n,m;
    cin>>n>>m;
    vector<array<int,3>>a(n+m-1,{-1,-1,-1});
    for(int i=0;i<n-1;i++)
    {
        cin>>a[i][1]>>a[i][2]>>a[i][0];
        a[i][1]--;
        a[i][2]--;
    }
    for(int i=0;i<m;i++)
    {
        cin>>a[i+n-1][0]>>a[i+n-1][2];
        a[i+n-1][2]--;
        a[i+n-1][1]=-i-1;
    }
    sort(all(a));
    reverse(all(a));
    DSU dsu(n);
    vector<int>rez(m);
    for(auto &c:a)
    {
        if(c[1]>=0)
        {
            dsu.unite(c[1],c[2]);
        }
        else
        {
            rez[-c[1]-1]=dsu.size(c[2])-1;
        }
    }
    for(auto &c:rez)
        cout<<c<<'\n';

}
main()
{
    i32 tt=1;
    ios::sync_with_stdio(false);
    cin.tie(0);
    //cin>>tt;
    while(tt--)
    {
        solve();
    }
}
